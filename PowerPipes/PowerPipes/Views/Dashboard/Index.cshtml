@using PowerPipes.Models
@model Dashboard



    <div class="jumbotron">
        <h2> <span class="title">Dashboard</span> </h2>


        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Best Competition Squat</th>
                    <th scope="col">Best Competition Bench</th>
                    <th scope="col">Best Competition Deadlift</th>
                    <th scope="col">Best Training Squat</th>
                    <th scope="col">Best Training Bench</th>
                    <th scope="col">Best Training Deadlift</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td> @Html.DisplayFor(m => m.MaxCompetitionSquat) kg </td>
                    <td> @Html.DisplayFor(m => m.MaxCompetitionBench) kg</td>
                    <td> @Html.DisplayFor(m => m.MaxCompetitionDeadlift) kg</td>
                    <td> @Html.DisplayFor(m => m.MaxTrainingSquat) @Html.DisplayFor(m => m.MaxTrainingSquatUnit)</td>
                    <td> @Html.DisplayFor(m => m.MaxTrainingBench) @Html.DisplayFor(m => m.MaxTrainingBenchUnit)</td>
                    <td> @Html.DisplayFor(m => m.MaxTrainingDeadlift) @Html.DisplayFor(m => m.MaxTrainingDeadliftUnit)</td>
                </tr>
            </tbody>
        </table>

        
        <h2>Objectifs Atteints</h2>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Objectifs</th>
                    <th scope="col">Performances</th>
                    <th scope="col">Différence</th>
                    <th scope="col">Accomplis le</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var goalProgress in Model.AccomplishedGoals)
            {
                <tr>
                    <td> @Html.Raw(goalProgress.ExerciseName +" "+ goalProgress.goal.Repetition + " x " + goalProgress.goal.Weight + goalProgress.goal.Unit) </td>
                    <td> @Html.Raw(goalProgress.PerformedExercise.Repetition + " x " + goalProgress.PerformedExercise.Weight + goalProgress.PerformedExercise.Unit) </td>
                    <td> @Html.Raw(goalProgress.Difference)  @Html.Raw(goalProgress.goal.Unit)</td>
                    <td> @Html.Raw(goalProgress.AccomplishedDate.ToShortDateString()) </td>
                </tr>
        }
            </tbody>
        </table>

        <h2>Objectifs à atteindre</h2>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Objectifs</th>
                    <th scope="col">Performances</th>
                    <th scope="col">Différence</th>
                    <th scope="col">Date limite</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var goalProgress in Model.PendingGoals)
            {
                <tr>
                    <td> @Html.Raw(goalProgress.ExerciseName +" "+ goalProgress.goal.Repetition + " x " + goalProgress.goal.Weight + goalProgress.goal.Unit) </td>
                    <td> @Html.Raw(goalProgress.PerformedExercise.Repetition + " x " + goalProgress.PerformedExercise.Weight + goalProgress.PerformedExercise.Unit) </td>
                    <td>@Html.Raw(goalProgress.Difference + goalProgress.goal.Unit)</td>
                    <td> @Html.Raw(goalProgress.goal.Date.ToShortDateString()) </td>
                </tr>
        }
            </tbody>
        </table>

        <table class="table">
            <div>
                <div class="col-sm-6 bold padding-top">
                    <div id="squat_progress_chart"></div>
                </div>

                <div class="col-sm-6 bold padding-top">
                    <div id="bench_progress_chart"></div>
                </div>
            </div>
        </table>

        <table class="table">
            <div>
                <div class="col-sm-6 bold padding-top">
                    <div id="deadlift_progress_chart"></div>
                </div>
            </div>
        </table>
    </div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback(drawSquatChart);
    google.charts.setOnLoadCallback(drawBenchChart);
    google.charts.setOnLoadCallback(drawDeadliftChart);

    function drawSquatChart() {

        var dataArray = [];
        dataArray.push(['Date', 'Poids']);

        var exercises = @Html.Raw(Json.Encode(Model.SquatProgression));

        if (Object.keys(exercises).length > 0) {
            exercises.forEach(function (exercise) {
                var date = new Date(parseInt(exercise['Date'].replace("/Date(", "").replace(")/", ""), 10))
                dataArray.push([date, exercise['Weight']]);
            });
        } else {
            dataArray.push([new Date(), 0]);
        }

        var data = google.visualization.arrayToDataTable(dataArray);

        var options = {
            title: 'Progression au Squat',
            curveType: 'function',
            legend: { position: 'bottom' }
        };

        var chart = new google.visualization.LineChart(document.getElementById('squat_progress_chart'));

        chart.draw(data, options);
    }

    function drawBenchChart() {

        var dataArray = [];
        dataArray.push(['Date', 'Poids']);

        var exercises = @Html.Raw(Json.Encode(Model.BenchProgression));

        if (Object.keys(exercises).length > 0) {
            exercises.forEach(function (exercise) {
                var date = new Date(parseInt(exercise['Date'].replace("/Date(", "").replace(")/", ""), 10))
                dataArray.push([date, exercise['Weight']]);
            });
        } else {
            dataArray.push([new Date(), 0]);
        }

        var data = google.visualization.arrayToDataTable(dataArray);

        var options = {
            title: 'Progression au Bench',
            curveType: 'function',
            legend: { position: 'bottom' }
        };

        var chart = new google.visualization.LineChart(document.getElementById('bench_progress_chart'));

        chart.draw(data, options);
    }

    function drawDeadliftChart() {

        var dataArray = [];
        dataArray.push(['Date', 'Poids']);

        var exercises = @Html.Raw(Json.Encode(Model.DeadliftProgression));
        if (Object.keys(exercises).length > 0) {
            exercises.forEach(function (exercise) {
                var date = new Date(parseInt(exercise['Date'].replace("/Date(", "").replace(")/", ""), 10))
                dataArray.push([date, exercise['Weight']]);
            });
        } else {
            dataArray.push([new Date(), 0]);
        }

        var data = google.visualization.arrayToDataTable(dataArray);

        var options = {
            title: 'Progression au Deadlift',
            curveType: 'function',
            legend: { position: 'bottom' }
        };

        var chart = new google.visualization.LineChart(document.getElementById('deadlift_progress_chart'));

        chart.draw(data, options);
    }
</script>